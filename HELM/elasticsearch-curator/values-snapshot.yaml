# Default values for elasticsearch-curator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

cronjob:
  # At 01:00 every day
  schedule: "0 18 * * *"
  annotations: {}
  labels: {}
  concurrencyPolicy: ""
  failedJobsHistoryLimit: ""
  successfulJobsHistoryLimit: ""
  jobRestartPolicy: Never

pod:
  annotations: {}
  labels: {}

rbac:
  # Specifies whether RBAC should be enabled
  enabled: true

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

psp:
  # Specifies whether a podsecuritypolicy should be created
  create: true

image:
  repository: untergeek/curator
  tag: 5.7.6
  pullPolicy: IfNotPresent

hooks:
  install: false
  upgrade: false

# run curator in dry-run mode
dryrun: false

command: ["/curator/curator"]
env: {}

configMaps:
  # Delete indices older than 7 days
  action_file_yml: |-
    ---
    actions:
      1:
        action: snapshot
        description: >-
          Snapshot logstash- prefixed indices older than 1 day (based on index
          creation_date) with the default snapshot name pattern of
          'snapshot-%Y%m%d%H%M%S'.  Wait for the snapshot to complete.  Do not skip
          the repository filesystem access check.  Use the other options to create
          the snapshot.
        options:
          repository: prod_logserver_snapshot
          # Leaving name blank will result in the default 'curator-%Y%m%d%H%M%S'
          name: 'snapshot-%Y%m%d'
          ignore_unavailable: False
          include_global_state: True
          partial: False
          wait_for_completion: True
          skip_repo_fs_check: False
          timeout_override:
          continue_if_exception: False
          disable_action: False
        filters:
        - filtertype: pattern
          kind: regex
          value: '^(wazuh-alerts-3.x-|wazuh-monitoring-3.x-|kubernetes_cluster-|security-auditlog-).*$'
        - filtertype: age
          source: creation_date
          direction: older
          unit: days
          unit_count: 1
          exclude:

  # Having config_yaml WILL override the other config
  config_yml: |-
    ---
    client:
      hosts:
        - logging-master.logging
      port: 9200
      # url_prefix:
      use_ssl: True
      certificate: /certs/root-ca.pem
      client_cert: /certs/elasticsearch-client.pem
      client_key:  /certs/elasticsearch-client.key
      ssl_no_validate: True
      http_auth: 'snapshotrestore:acor7Yoovoon+15'
      timeout: 30
      master_only: False
    logging:
      loglevel: INFO
      logfile:
      logformat: default
      blacklist: ['elasticsearch', 'urllib3']

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

priorityClassName: ""

# extraVolumes and extraVolumeMounts allows you to mount other volumes
# Example Use Case: mount ssl certificates when elasticsearch has tls enabled
extraVolumes:
  - name: elastic-certificates-goals101
    secret:
      defaultMode: 420
      secretName: elastic-certificates-goals101
extraVolumeMounts:
  - name: elastic-certificates-goals101
    mountPath: /certs
    readOnly: true

# Add your own init container or uncomment and modify the given example.
extraInitContainers:
  {}
  ## Don't configure S3 repository till Elasticsearch is reachable.
  ## Ensure that it is available at http://elasticsearch:9200
  ##
  # elasticsearch-s3-repository:
  #   image: jwilder/dockerize:latest
  #   imagePullPolicy: "IfNotPresent"
  #   command:
  #   - "/bin/sh"
  #   - "-c"
  #   args:
  #   - |
  #     ES_HOST=elasticsearch
  #     ES_PORT=9200
  #     ES_REPOSITORY=backup
  #     S3_REGION=us-east-1
  #     S3_BUCKET=bucket
  #     S3_BASE_PATH=backup
  #     S3_COMPRESS=true
  #     S3_STORAGE_CLASS=standard
  #     apk add curl --no-cache && \
  #     dockerize -wait http://${ES_HOST}:${ES_PORT} --timeout 120s && \
  #     cat <<EOF | curl -sS -XPUT -H "Content-Type: application/json" -d @- http://${ES_HOST}:${ES_PORT}/_snapshot/${ES_REPOSITORY} \
  #     {
  #       "type": "s3",
  #       "settings": {
  #         "bucket": "${S3_BUCKET}",
  #         "base_path": "${S3_BASE_PATH}",
  #         "region": "${S3_REGION}",
  #         "compress": "${S3_COMPRESS}",
  #         "storage_class": "${S3_STORAGE_CLASS}"
  #       }
  #     }

securityContext:
  runAsUser: 16 # run as cron user instead of root
